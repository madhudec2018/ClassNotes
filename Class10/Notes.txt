console.log(sum(1,2));// NaN 
console.log(sum('1',2)); //--> 

function sum(a,b){
    return a + b;
}

function sum(a,b, c){
    // '1' + 2 + undefined 
    // '12' + undefined 
    // '12undefined'
    //1 + 2 + undefined
    // 3 +NaN -- NaN 
     return a + b + c;
}


function sum(a,b){
    return a + b;
}
console.log(sum(1,2)); // NaN 
function sum(a,b, c){
     return a + b + c;
}

console.log(sum(1,2,3)); // NaN

function sum(a,b, c){
    return a + b + c;
}

console.log(sum(1,2, 3)); //NaN
function sum(a,b, c, d){
    //true + true + false + false 
    // 1  + 1 + 0 + 0
    return a +  b + c + d;
}

console.log(sum(1,2, 3, 4)); // 10
sum(); //NaN

var isFirst = true;
var isCorrect = true;
var isWrong = false;

console.log(sum(isFirst, isCorrect, isWrong, isWrong) );




function sum(a,b){
    return a + b; //11
}

function getValue(){
    return 10;
}
//toString 

console.log(sum(1,getValue));

var name = 'John';
name = 'John1';
name = 'function getValue(){ return 10}'
function sum(a,b, c, d){
    //true + true + false + false 
    // 1  + 1 + 0 + 0
    return a +  b + c + d;
}

function getValue(a,b){
    return 10;
}

var res =  getValue();//10
var o = sum(1,res,3,4); //18

var firstResult = sum(1,getValue(),3,4); //18

console.log(firstResult); //18 

var output = sum(1,getValue,3,4);

console.log(output);
//functions are first class objects in javascript 

************************************************************************


function add(a,b,c){

    
   
    function sum(a,b){
        return 10 + a + b;
    }
    
	var sum = function(a,b){
        return a + b;
    }

    var sum = function(a,b){
       return 20 + a + b;
    }

    return sum(a,b); //25
}
/*************
 * 
 * if it is function declaration, it assigns memory and also stores function in to it 
 *  if it is a variable --> if already assigned , it will not assign memory again,
 *   if it is new variable --> it just assigns memory for that but not store in there 

 *    ________
 *   |   -----|--->function sum(a,b){  return 10 + a + b;  }
 *   |________|
 *    sum
 * 
 * 
 *   
 */

 //recursion 


//1,1,2,3,5,8,13,21,39
//fib(0) -- > 1
//fib(1) --> 1
//fib(2) --> fib(1) + fib(0); --> 2
//fib(3) -- fib(2) + fib(1) --> 3
//fib(4) -- fib(3) + fib(2) --> 5

//n > 1
//fib(n) = fib(n-1) + fib(n-2);

function fib(n){
    if( n <= 1){
        return 1;
    }
    //fib(2)
    return fib(n - 1) + fib( n - 2);
    //recursion --> function calling itself 
}

// fib(3)
  // return fib(2)                            +              fib(1)
          //fib(2) -- fib(1) + fib(0)
              //      -- 1 + 1 +  1 
              //3
//anonymous funciton 
var sumResult = function fib(a,b){
    return a +b + fib(1);
}(1,2);              

********************************************

Imp of Semicolon


function getPersonDetails() {
    //   var person =   {
    //     name : 'John'
    //   };
    //   return person;
    
    //   return {
    //     name : 'John'
    //   };

    return {
        name : 'John'
    };
}
const obj = getPersonDetails();

console.dir(obj);

parseInt("10abc",10) //10

